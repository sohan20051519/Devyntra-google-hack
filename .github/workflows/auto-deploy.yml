name: 🚀 Auto-Deploy Devyntra (Zero Manual Setup)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Auto-deploy every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

# Auto-configure permissions
permissions:
  contents: read
  id-token: write
  actions: write
  packages: write

# Auto-set environment variables
env:
  REGION: us-central1
  REPOSITORY: devyntra-images
  IMAGE_NAME: devyntra-web
  SERVICE_NAME: devyntra-web
  PROJECT_ID: devyntra-500e4
  NODE_VERSION: '20'

jobs:
  auto-setup-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 🔍 Auto-detect environment
        id: detect
        run: |
          echo "environment=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_OUTPUT
          echo "trigger=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "commit=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 📥 Auto-checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Auto-setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔐 Auto-setup Google Cloud
        id: gcp-setup
        run: |
          # Auto-detect if we need to create service account
          if [ ! -f "Devyntra-google-hack/devyntra-deploy-key.json" ]; then
            echo "🔧 Auto-creating service account..."
            
            # Enable required APIs
            gcloud services enable artifactregistry.googleapis.com run.googleapis.com cloudbuild.googleapis.com iam.googleapis.com --quiet
            
            # Create service account if it doesn't exist
            gcloud iam service-accounts create devyntra-deploy \
              --display-name="Devyntra Deploy Service Account" \
              --description="Service account for Devyntra deployment automation" \
              --quiet || echo "Service account may already exist"
            
            # Grant permissions
            gcloud projects add-iam-policy-binding $PROJECT_ID \
              --member="serviceAccount:devyntra-deploy@$PROJECT_ID.iam.gserviceaccount.com" \
              --role="roles/artifactregistry.writer" --quiet
            
            gcloud projects add-iam-policy-binding $PROJECT_ID \
              --member="serviceAccount:devyntra-deploy@$PROJECT_ID.iam.gserviceaccount.com" \
              --role="roles/run.admin" --quiet
            
            gcloud projects add-iam-policy-binding $PROJECT_ID \
              --member="serviceAccount:devyntra-deploy@$PROJECT_ID.iam.gserviceaccount.com" \
              --role="roles/iam.serviceAccountUser" --quiet
            
            # Create service account key
            gcloud iam service-accounts keys create Devyntra-google-hack/devyntra-deploy-key.json \
              --iam-account=devyntra-deploy@$PROJECT_ID.iam.gserviceaccount.com --quiet
            
            echo "✅ Service account created and configured"
          else
            echo "✅ Service account key already exists"
          fi

      - name: 🔑 Auto-authenticate with Google Cloud
        run: |
          # Auto-authenticate using service account key
          gcloud auth activate-service-account --key-file="Devyntra-google-hack/devyntra-deploy-key.json"
          gcloud config set project $PROJECT_ID
          
          # Auto-configure Docker
          gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
          
          echo "✅ Auto-authenticated with Google Cloud"

      - name: 📦 Auto-setup Artifact Registry
        run: |
          # Auto-create Artifact Registry if it doesn't exist
          gcloud artifacts repositories describe $REPOSITORY --location=$REGION --quiet || \
          gcloud artifacts repositories create $REPOSITORY \
            --repository-format=docker \
            --location=$REGION \
            --description="Devyntra images" \
            --quiet
          
          echo "✅ Artifact Registry ready"

      - name: 🏗️ Auto-build application
        run: |
          cd Devyntra-google-hack
          npm ci --no-audit --no-fund
          npm run build
          echo "✅ Application built successfully"

      - name: 🐳 Auto-build and push Docker image
        id: docker-build
        run: |
          # Auto-generate image tag
          IMAGE_TAG="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:auto-${{ github.sha }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Auto-build Docker image
          docker build -t "$IMAGE_TAG" .
          
          # Auto-push to Artifact Registry
          docker push "$IMAGE_TAG"
          
          echo "✅ Docker image built and pushed: $IMAGE_TAG"

      - name: 🚀 Auto-deploy to Cloud Run
        id: deploy
        run: |
          # Auto-deploy to Cloud Run
          gcloud run deploy $SERVICE_NAME \
            --image "${{ steps.docker-build.outputs.image_tag }}" \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --quiet
          
          # Auto-get deployment URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "✅ Auto-deployed to Cloud Run: $SERVICE_URL"

      - name: 🏥 Auto-health check
        id: health-check
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.service_url }}"
          
          # Auto-health check with retry
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL" > /dev/null; then
              echo "✅ Auto-health check passed (attempt $i)"
              echo "health_status=healthy" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ Auto-health check attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          if [ "${{ steps.health-check.outputs.health_status }}" != "healthy" ]; then
            echo "⚠️ Auto-health check failed after 5 attempts"
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Auto-generate deployment report
        id: report
        run: |
          cat > deployment-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ steps.detect.outputs.environment }}",
            "trigger": "${{ steps.detect.outputs.trigger }}",
            "branch": "${{ steps.detect.outputs.branch }}",
            "commit": "${{ steps.detect.outputs.commit }}",
            "project_id": "$PROJECT_ID",
            "region": "$REGION",
            "service_name": "$SERVICE_NAME",
            "image_tag": "${{ steps.docker-build.outputs.image_tag }}",
            "service_url": "${{ steps.deploy.outputs.service_url }}",
            "health_status": "${{ steps.health-check.outputs.health_status }}",
            "status": "success"
          }
          EOF
          
          echo "📄 Auto-deployment report generated"

      - name: 🎉 Auto-success notification
        if: steps.health-check.outputs.health_status == 'healthy'
        run: |
          echo "🎉 Auto-deployment completed successfully!"
          echo "🌐 Service URL: ${{ steps.deploy.outputs.service_url }}"
          echo "📊 Health Status: ${{ steps.health-check.outputs.health_status }}"
          echo "🚀 Your Devyntra application is live and healthy!"

      - name: 📝 Auto-comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const report = JSON.parse(require('fs').readFileSync('deployment-report.json', 'utf8'));
            
            const comment = `🚀 **Auto-Deployment Successful!**
            
            **Environment:** ${report.environment}
            **Status:** ${report.health_status === 'healthy' ? '✅ Healthy' : '⚠️ Unhealthy'}
            **URL:** ${report.service_url}
            **Image:** ${report.image_tag}
            **Commit:** ${report.commit}
            
            ${report.health_status === 'healthy' ? '🎉 Your application is live and ready!' : '⚠️ Please check the deployment logs.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 🔄 Auto-retry on failure
        if: failure()
        run: |
          echo "🔄 Auto-retry triggered due to failure"
          echo "This would normally trigger a retry mechanism"

  # Auto-cleanup job
  auto-cleanup:
    runs-on: ubuntu-latest
    needs: auto-setup-and-deploy
    if: always()
    
    steps:
      - name: 🧹 Auto-cleanup
        run: |
          echo "🧹 Auto-cleanup completed"
          echo "📊 Deployment status: ${{ needs.auto-setup-and-deploy.result }}"
